/**
 * Purpose: This is an input file for bison defining the syntax and actions
 * to generate code for simple assignments.
 * Flex recognizes tokens and parser
 * places identifiers into the symbol table if they are not already there.
 * see http://pooh.poly.asu.edu/Cst502
 * @author Tim Lindquist (Tim.Lindquist@asu.edu), ASU Polytechnic, Engineering
 * @version April 2011
 */

%{
#include <math.h>  /* Math functions-more for possible extensions than needed*/
#define MAX_CHARS 255
#define MAX_STATEMENTS 255
char * stmt[MAX_STATEMENTS][MAX_CHARS];
int jumpStack[255], top = -1, curLine = -1;

void push(int val) {
	jumpStack[++top] = val;
}

int pop() {
	return jumpStack[top--]; 
}

// JMP Stack Stuff
%}



/* define the types that are returned by the lexical analyzer. */
%union {
int val;        /* For returning numbers. */
char *string;   /* For returning identifier strings */
}

/* define the tokens to be returned by flex. */
%token LPAREN RPAREN ASSIGN SEMI LBRACE RBRACE IF WHILE PLUS MINUS STAR SLASH GT LT EQ READ PRINT NEWLINE

/* Variable and type identifiers */
%token <val>  ADOUBLE       
%type <string> expr
%token <string> ID         

/* precendence order*/
%left PLUS MINUS
%left STAR SLASH
%left LPAREN RPAREN

%%
/* Grammar - the grammar is ambiguous and would cause conflicts without
   precedence and associativity defined above. */

stmtl:   stmt NEWLINE              //{ printf("stmtl: stmt\n");}
       | stmt NEWLINE stmtl        //{ printf("stmtl: stmt SEMI stmtl\n");}
;


stmt:    ID ASSIGN expr         { 

strcpy(stmt[++curLine], "STOR ");
strcat(stmt[curLine], $1);

}
       | LBRACE NEWLINE stmtl RBRACE    { printf("{stmtl}\n");}
       | READ ID                { 

//printf("READ\nSTOR %s\n", $2);
strcpy(stmt[++curLine], "READ\nSTOR ");
strcat(stmt[curLine], $2);

}

       | PRINT ID               { 

printf("PRINT\n");

}
       | IF LPAREN expr RPAREN stmt 
       | WHILE { printf("===DOWHILE===\n");} LPAREN expr RPAREN stmt{ printf("===ENDWHILE===\n");}
;

expr:    LPAREN expr RPAREN     { printf("(expr)\n");}
       | ID                     { printf("PUSH %s\n" ,$1);}
       | ADOUBLE                { printf("PUSH %d\n" ,$1);}
       | expr PLUS expr         { printf("ADD\n");}
       | expr MINUS expr        { printf("SUB\n");}
       | expr STAR expr         { printf("MUL\n");}
       | expr SLASH expr        { printf("DIV\n");}
       | expr GT expr           { printf("TGT\n");}
       | expr LT expr           { printf("TLT\n");}
       | expr EQ expr           { printf("TEQ\n");}								  
;
/* End of grammar */
%%
#include <stdio.h>

extern FILE *yyin; /* allows input from file */
main (argc, argv)
   int argc;
   char **argv; {
   ++argv, --argc;  /* skip over program name */
   if (argc > 0){   /* if cmd line arg is file name of input file */
     yyin = fopen(argv[0], "r");
   }else{
     yyin = stdin;
   }

   yyparse();
   int x = 0;
   for(x = 0; x <= curLine; x++) {
      strcat(stmt[x], "\n");
      printf(stmt[x]);
   } 
}

yyerror (s)  /* called by yyparse on an error */
   char *s; {
   printf ("Error: %s\n",s);
}
