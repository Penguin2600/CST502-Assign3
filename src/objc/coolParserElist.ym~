/**
 * Purpose: This is an input file for bison defining the syntax and actions
 * to generate code for simple assignments.
 * Flex recognizes tokens and parser
 * places identifiers into the symbol table if they are not already there.
 * see http://pooh.poly.asu.edu/Cst502
 * @author Tim Lindquist (Tim.Lindquist@asu.edu), ASU Polytechnic, Engineering
 * @version April 2011
 */
%{
#include <math.h>  /* Math functions-more for possible extensions than needed*/
#import "SymbolTable.h"  /* Contains definition of the symboltable */
#import "STEntry.h"  /* Contains definition of the symbol table entries */
SymbolTable *aST;
char inter[MAX_STMNT][MAX_CHARS];
FILE *fp;
%}
/* define the types that are returned by the lexical analyzer. */
%union {
int val;  /* For returning numbers. */
char *string;   /* For returning symbol-table variable identifier strings */
}
/* define the tokens to be returned by flex. */
%token LPAREN RPAREN ASSIGN SEMI LBRACE RBRACE IF WHILE NADA COMMA PLUS MINUS STAR SLASH LT GT LE GE EQ NE READ PRINT
%token <val>  ADOUBLE       /* Simple double precision number */
%type <string> expr
%token <string> ID   /* Variable and type identifiers */
/* %type  <val>  expr */


/* %right IF WHILE */
/* %left DOT */

/* precendence order: parenthesis,*,/,+,- */
%right ASSIGN
%left PLUS MINUS
%left STAR SLASH
%left LPAREN RPAREN

%%
/* Grammar - the grammar is ambiguous and would cause conflicts without
   precedence and associativity defined above. */



elist:   expr                          { printf("adding expr; to elist\n");}
       | expr SEMI elist               { printf("reducing expr; elist\n");}

expr:    ID ASSIGN expr                { printf("%s := %s\n",$1,$3);} 

       | IF LPAREN expr RPAREN expr    { printf("reducing IF\n");}

       | WHILE {printf("WHILE ");} LPAREN expr RPAREN {printf(" DO ");} expr {printf(" DONE ");}

       | LBRACE elist RBRACE           { printf("reduce {expr}\n"); }

       | LPAREN expr RPAREN            { printf("reduce (expr)\n"); }

       | NADA                          { printf("reduce nil\n");
                                         $$ = [[aST currentTmpName] UTF8String];}
       | ID                            { printf("reduce ID\n");
                                         $$ = $1; }
       | ADOUBLE                       { $$ = [[aST nextTmpName] UTF8String];
                                       printf("newDoubleToTmp  %d, %s\n",$1,
                                           [[aST currentTmpName] UTF8String]);}
       | expr PLUS expr                { printf("%s = %s + %s\n",
                                       [[aST nextTmpName] UTF8String], $1, $3);
                                         $$ = [[aST currentTmpName] UTF8String];}
       | expr MINUS expr               { printf("%s = %s - %s\n",
                                       [[aST nextTmpName] UTF8String], $1, $3);
                                         $$ = [[aST currentTmpName] UTF8String];}
       | expr STAR expr                { printf("%s = %s * %s\n",
                                       [[aST nextTmpName] UTF8String], $1, $3);
                                         $$ = [[aST currentTmpName] UTF8String];}
       | expr SLASH expr               { printf("%s = %s / %s\n",
                                       [[aST nextTmpName] UTF8String], $1, $3);
                                         $$ = [[aST currentTmpName] UTF8String];}

       | expr GT expr                  { printf("%s > %s",$1, $3);}
       | expr LT expr                  { printf("%s < %s",$1, $3);}
       | expr GE expr                  { printf("%s => %s",$1, $3);}
       | expr LE expr                  { printf("%s =< %s",$1, $3);}
       | expr EQ expr                  { printf("%s == %s",$1, $3);}
       | expr NE expr                  { printf("%s != %s",$1, $3);}

       | READ ID                       { printf("readDoubleInto %s\n",$2);
                                         $$ = [[aST currentTmpName] UTF8String];}
       | PRINT ID                      { printf("writeDouble %s\n",$2);}								  
;

/* End of grammar */
%%
#include <stdio.h>
#import "SymbolTable.h" /* uses import rather than include incase redundant */
#import "STEntry.h"

extern FILE *yyin; /* allows input from file */
main (argc, argv)
   int argc;
   char **argv; {
   ++argv, --argc;  /* skip over program name */
   if (argc > 0){   /* if cmd line arg is file name of input file */
     yyin = fopen(argv[0], "r");
   }else{
     yyin = stdin;
   }
   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
   aST = [[SymbolTable alloc] initWithName: @"TimsST"];
   printf("Created the symbol table.\n" );
   /*[aST print];*/
   yyparse();
   [aST print];
   [aST release];
   [pool release];
}

yyerror (s)  /* called by yyparse on an error */
   char *s; {
   printf ("Error: %s\n",s);
}
